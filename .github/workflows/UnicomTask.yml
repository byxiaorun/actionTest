name: UnicomTask

on:
  push:
    branches: main
    paths:
    - 'task/unicom'
    - '.github/workflows/UnicomTask.yml'
  gollum:
  workflow_dispatch:
  schedule:
    - cron: '30 23 * * *'

env:
  SAVE_DIR_NAME: 'UnicomTask'
  GIT_REPO_URL: 'https://github.com/srcrs/UnicomTask.git'
  # github api 请求头的 accept
  GIT_API_ACCEPT: 'application/vnd.github.v3+json'
  # github api 请求头的验证 token
  GIT_API_AUTH: 'token ${{ github.token }}'
  # 获取所有 workflows API 地址 ${{ github.repository }} 和 $GITHUB_REPOSITORY 相同
  GIT_API_RUNS_LIST: 'https://api.github.com/repos/${{ github.repository }}/actions/runs'

jobs:
  deploy:

    runs-on: ubuntu-latest

    steps:
    #- uses: actions/checkout@v2
    - name: Clone BilibiliTask
      run: |
        git clone $GIT_REPO_URL $SAVE_DIR_NAME
        WORK_DIR=$GITHUB_WORKSPACE/$SAVE_DIR_NAME && echo "WORK_DIR=$WORK_DIR" >> $GITHUB_ENV
        echo "GITHUB_WORKSPACE=$WORK_DIR" >> $GITHUB_ENV

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/run_in_Actions/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        pip install -r $WORK_DIR/requirements.txt

    - name: Build and publish
      env:
        USERS_COVER: ${{ secrets.UNICOM_USERS_COVER }}
      run: |
        cd $WORK_DIR && echo "$USERS_COVER" > $WORK_DIR/config.json
        # 随机延时 30~60 分钟
        sleepSeconds=$((RANDOM % 1800 + 1800)) && doTime=`date -d "+$sleepSeconds second" "+%Y-%m-%d %H:%M:%S"`
        echo "等待 $sleepSeconds 秒后的 $doTime 开始执行" && sleep "$sleepSeconds"s
        cd $WORK_DIR && python $WORK_DIR/main.py

    - name: Delete Cancelled And Old Runs
      run: |
        # 获取所有被取消的workflow run id
        CANCELLED_IDS=`python3 -c "import json,urllib.request as rq; header={'Accept':'$GIT_API_ACCEPT','Authorization': '$GIT_API_AUTH'}; req=rq.Request('$GIT_API_RUNS_LIST',headers=header); res=rq.urlopen(req).read(); flows=json.loads(res.decode());ids=[str(flow['id']) for flow in flows['workflow_runs'] if flow['conclusion']=='cancelled']; print(' '.join(ids))"`
        echo CANCELLED_IDS=$CANCELLED_IDS
        for id in `echo $CANCELLED_IDS`; do curl -s -H "Authorization: $GIT_API_AUTH" -H "Accept: $GIT_API_ACCEPT" -X DELETE "$GIT_API_RUNS_LIST/$id"; done
        # 当前workflow的记录保留5条
        OLD_IDS=`python3 -c "import json,urllib.request as rq; header={'Accept':'$GIT_API_ACCEPT','Authorization': '$GIT_API_AUTH'}; req=rq.Request('$GIT_API_RUNS_LIST',headers=header); res=rq.urlopen(req).read(); flows=json.loads(res.decode());ids=[str(flow['id']) for flow in flows['workflow_runs'] if flow['name']=='$GITHUB_WORKFLOW']; print(' '.join(ids[5:]))"`
        echo OLD_IDS=$OLD_IDS
        for id in `echo $OLD_IDS`; do curl -s -H "Authorization: $GIT_API_AUTH" -H "Accept: $GIT_API_ACCEPT" -X DELETE "$GIT_API_RUNS_LIST/$id"; done

