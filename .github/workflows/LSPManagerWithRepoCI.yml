name: LSPosed Manager With Repo CI

on:
  push:
    branches: [ main ]
    paths:
    - 'lsp/**'
    - '.github/workflows/LSPManagerWithRepoCI.yml'

env:
  # LSP giturl
  LSP_GIT_URL: 'https://github.com/LSPosed/LSPosed.git'
  # 管理器actions地址
  MANAGER_CI_URL: 'https://github.com/LSPosed/LSPosed/actions?query=workflow%3AManager'
  # 老包名
  MANAGER_PACKAGE_NAME_OLD: 'io.github.lsposed.manager'
  # 新包名
  MANAGER_PACKAGE_NAME_NEW: 'me.lspmanager'
  # github api 请求头的 accept
  GIT_API_ACCEPT: 'application/vnd.github.v3+json'
  # 获取所有 workflows API 地址
  GIT_API_RUNS_LIST: 'https://api.github.com/repos/${{ github.repository }}/actions/runs'
  # 代码保存位置
  WORK_DIR_NAME: 'LSPosed'

jobs:
  build:
    runs-on: ubuntu-latest
    #if: ${{ startsWith(github.event.head_commit.message, 'lspmanager') }}
    steps:
      - name: Clone Code
        run: |
          WORK_DIR=$GITHUB_WORKSPACE/$WORK_DIR_NAME && echo "WORK_DIR=$WORK_DIR" >> $GITHUB_ENV
          git clone -b neko-module-repo $LSP_GIT_URL $WORK_DIR --recursive
      - name: set up JDK 1.8
        if: success()
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Get version code
        if: success()
        run: |
          # 从源仓库的 actions 页面获取 run_number 来计算 versionCode
          echo APPVEYOR_BUILD_NUMBER=$(expr `curl -s $MANAGER_CI_URL | grep -E '^ *#([0-9]*):$' -m 1 | grep -oE '[0-9]*'` + 4999) >> $GITHUB_ENV
          echo APPVEYOR_BUILD_NUMBER=$APPVEYOR_BUILD_NUMBER
      - name: Customize
        if: success()
        run: |
          cd $WORK_DIR
          # 包名
          sed -i "s/$MANAGER_PACKAGE_NAME_OLD/$MANAGER_PACKAGE_NAME_NEW/g" $WORK_DIR/app/build.gradle
          # APP 显示名 2020-02-29 commit d5e20bb1c92e1db57064c708b3d25029b9014eca 官方将 "LSPosed Manager" 改为 "LSPosed"
          sed -i "s/>LSPosed</>iLSPManager Manager</g" $WORK_DIR/app/src/main/res/values/strings.xml
          # shortcut 中的包名
          sed -i "s/\"$MANAGER_PACKAGE_NAME_OLD\"/\"$MANAGER_PACKAGE_NAME_NEW\"/g" $WORK_DIR/app/src/main/res/xml/shortcuts.xml
          # 输出文件名
          sed -i 's/outputFileName =.*/outputFileName = \"iLSPosedManagerRepo-${defaultConfig.versionName}-${rootProject.ext.versionCode}-${buildType.name}.apk\"/g' $WORK_DIR/app/build.gradle
      - name: Build with Gradle
        if: success()
        id: buildRelease
        run: |
          cd $WORK_DIR && bash $WORK_DIR/gradlew :app:assembleRelease
          # apk 文件输出路径
          releaseApkDir=$WORK_DIR/app/build/outputs/apk/release && echo "::set-output name=releaseApkDir::$releaseApkDir" && echo "releaseApkDir=$releaseApkDir" >> $GITHUB_ENV
          # apk 输出文件名(无后缀)
          releaseApkName=`cd $releaseApkDir && ls iLSPosed*.apk | awk -F '.apk' '{print $1}'` && echo "::set-output name=releaseApkName::$releaseApkName" && echo "releaseApkName=$releaseApkName" >> $GITHUB_ENV
      - name: Sign Manager Release
        if: success()
        id: sign
        uses: LSPosed/sign-android-release@v1.0.0
        with:
          releaseDirectory: ${{ steps.buildRelease.outputs.releaseApkDir }}
          signingKeyBase64: ${{ secrets.SIGN_KEY_BASE64 }}
          alias: ${{ secrets.SIGN_KEY_ALIAS }}
          keyStorePassword: ${{ secrets.SIGN_KEY_STORE_PASS }}
          keyPassword: ${{ secrets.SIGN_KEY_PASS }}
        env:
          BUILD_TOOLS_VERSION: "30.0.3"

      - name: Upload signed apk
        if: success()
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.buildRelease.outputs.releaseApkName }}
          path: ${{ steps.sign.outputs.signedReleaseFile }}

      - name: Send Message
        if: success()
        run: |
          checkSuiteId=`curl -s -H "Accept: $GIT_API_ACCEPT" -H "Authorization: token ${{ secrets.ACTIONS_TOKEN }}" "$GIT_API_RUNS_LIST/$
          " | jq -r '.check_suite_id'`
          # 文件id 当前的api只能获取 complete 的 artifact, 但是 actions/upload-artifact@v2 无法在将运行中的 workflow 的 artifact 标记为 complete, 所以 此时全为空
          artifactId=`curl -s -H "Accept: $GIT_API_ACCEPT" -H "Authorization: token ${{ secrets.ACTIONS_TOKEN }}" "$GIT_API_RUNS_LIST/$GITHUB_RUN_ID/artifacts" | jq -r '.artifacts[0].id'`
          # 拼接下载地址
          archiveDownUrl="https://github.com/$GITHUB_REPOSITORY/suites/$checkSuiteId/artifacts/$artifactId"
          echo checkSuiteId=$checkSuiteId && echo artifactId=$artifactId && echo archiveDownUrl=$archiveDownUrl
          # workflow 详情页面
          wfRunUrl="https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
          # urlencode
          desp=`python3 -c 'from urllib.parse import quote;desp="'$releaseApkName'\r\n\r\n'$archiveDownUrl'\r\n\r\n'$wfRunUrl'";print("%s"%(quote(desp)))'`
          curl -s "https://sc.ftqq.com/${{ secrets.SERVERCHAN_KEY }}.send?text=iLSPosedManagerWithRepo.$APPVEYOR_BUILD_NUMBER&desp=$desp"
      - name: Delete Canceled Workflow
        run: |
          # 获取所有被取消的workflow run id
          CANCELLED_IDS=`python3 -c 'import os,json,urllib.request as rq; header={"Accept":"'$GIT_API_ACCEPT'"}; req=rq.Request("'$GIT_API_RUNS_LIST'",headers=header); res=rq.urlopen(req).read(); flows=json.loads(res.decode());ids=[str(flow["id"]) for flow in flows["workflow_runs"] if flow["conclusion"]=="cancelled"]; print(" ".join(ids))'`
          echo CANCELLED_IDS=$CANCELLED_IDS
          for id in `echo $CANCELLED_IDS`; do curl -s -H "Authorization: token ${{ secrets.ACTIONS_TOKEN }}" -H "Accept: $GIT_API_ACCEPT" -X DELETE "$GIT_API_RUNS_LIST/$id"; done


