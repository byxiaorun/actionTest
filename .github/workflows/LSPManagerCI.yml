name: LSPosed Manager CI

on:
  push:
    branches: [ main ]
    paths:
    - 'lsp/manager'
    - '.github/workflows/LSPManagerCI.yml'
  schedule:
    - cron: '0 */1 * * *'

env:
  # 新包名
  MANAGER_PACKAGE_NAME_NEW: 'me.lspmanager'
  # 老包名
  MANAGER_PACKAGE_NAME_OLD: 'io.github.lsposed.manager'
  # LSP giturl
  LSP_GIT_URL: 'https://github.com/LSPosed/LSPosed.git'
  # 管理器actions NAME
  LSP_ACTION_NAME: 'Manager'
  # github api 请求头的 accept
  GIT_API_ACCEPT: 'application/vnd.github.v3+json'
  # 获取所有 workflows API 地址
  GIT_API_RUNS_LIST: 'https://api.github.com/repos/${{ github.repository }}/actions/runs'
  # 获取 lsp 官方仓库所有 workflow 的API地址
  GIT_API_RUNS_LIST_LSP: 'https://api.github.com/repos/LSPosed/LSPosed/actions/runs'
  # 代码保存位置
  WORK_DIR_NAME: 'LSPosed'
  # 本仓库 commit message
  COMMIT_MESSAGE: ${{ github.event.head_commit.message }}

jobs:
  build:
    runs-on: ubuntu-latest
    #if: ${{ startsWith(github.event.head_commit.message, 'lspmanager') }}
    steps:
      - name: Get Latest CI Info
        id: ciInfo
        run: |
          # 获取 push 触发的最新一次构建事件
          latestCI=`python3 -c "import json;from urllib import request as rq;from urllib.parse import quote; runs=json.loads(rq.urlopen(rq.Request('$GIT_API_RUNS_LIST_LSP',headers={'Accept':'$GIT_API_ACCEPT','Authorization':'$GIT_API_AUTHO'})).read().decode());runInfo=[run for run in runs['workflow_runs'] if run['event']=='push' and run['name']=='$LSP_ACTION_NAME'][0];print(runInfo['created_at'],'-;-',runInfo['run_number'],'-;-',quote(runInfo['head_commit']['message']))"`
          # 赋值到变量中
          eval $(echo $latestCI | awk -F ' -;- ' '{printf("createTime=%s;runNum=%s;commitMsg=%s",$1,$2,$3)}')
          echo latestCI=$latestCI && echo createTime=$createTime runNum=$runNum commitMsg=$commitMsg
          # run number 用来计算最新的 versionCode
          APPVEYOR_BUILD_NUMBER=`expr $runNum + 4999` && echo "APPVEYOR_BUILD_NUMBER=$APPVEYOR_BUILD_NUMBER" >> $GITHUB_ENV && echo APPVEYOR_BUILD_NUMBER=$APPVEYOR_BUILD_NUMBER
          # 最新一次构建的commit注释信息
          echo "::set-output name=commitMsg::$commitMsg" && echo "commitMsg=$commitMsg" >> $GITHUB_ENV
          # 最近一次构建时间 与 当前时间 间隔
          TIME_INTERVAL=$(expr `date +%s` - `date -d $createTime +%s`)
          # 1. commit信息以 forceManager 单词开头的(肯定是push)直接开始执行
          # 2. LSP官方最近一次构建在1小时之内的
          #   2.1 commit信息以 manager 单词开头的(肯定是push)执行
          #   2.2 定时任务schedule触发的执行
          echo COMMIT_MESSAGE=$COMMIT_MESSAGE
          [[ $COMMIT_MESSAGE == forceManager* || ($TIME_INTERVAL -lt 3600 && ($COMMIT_MESSAGE == manager* || "$GITHUB_EVENT_NAME" == "schedule")) ]] && isRun=Y || isRun=N
          echo isRun=$isRun && echo "::set-output name=isRun::$isRun" && echo "isRun=$isRun" >> $GITHUB_ENV

      - name: Clone Code
        if: ${{ steps.ciInfo.outputs.isRun == 'Y' && success() }}
        run: |
          WORK_DIR=$GITHUB_WORKSPACE/$WORK_DIR_NAME && echo "WORK_DIR=$WORK_DIR" >> $GITHUB_ENV
          git clone -b master $LSP_GIT_URL $WORK_DIR --recursive

      - name: set up JDK 1.8
        if: ${{ steps.ciInfo.outputs.isRun == 'Y' && success() }}
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Customize
        if: ${{ steps.ciInfo.outputs.isRun == 'Y' && success() }}
        run: |
          cd $WORK_DIR
          # 包名
          sed -i "s/$MANAGER_PACKAGE_NAME_OLD/$MANAGER_PACKAGE_NAME_NEW/g" $WORK_DIR/app/build.gradle
          # APP 显示名 2020-02-29 commit d5e20bb1c92e1db57064c708b3d25029b9014eca 官方将 "LSPosed Manager" 改为 "LSPosed"
          sed -i "s/>LSPosed</>iLSPManager</g" $WORK_DIR/app/src/main/res/values/strings.xml
          # shortcut 中的包名
          sed -i "s/\"$MANAGER_PACKAGE_NAME_OLD\"/\"$MANAGER_PACKAGE_NAME_NEW\"/g" $WORK_DIR/app/src/main/res/xml/shortcuts.xml
          # 输出文件名
          sed -i 's/outputFileName =.*/outputFileName = \"iLSPosedManager-${defaultConfig.versionName}-${rootProject.ext.versionCode}-${buildType.name}.apk\"/g' $WORK_DIR/app/build.gradle

      - name: Build with Gradle
        if: ${{ steps.ciInfo.outputs.isRun == 'Y' && success() }}
        id: buildRelease
        run: |
          cd $WORK_DIR && bash $WORK_DIR/gradlew :app:assembleRelease
          # apk 文件输出路径
          releaseApkDir=$WORK_DIR/app/build/outputs/apk/release && echo "::set-output name=releaseApkDir::$releaseApkDir" && echo "releaseApkDir=$releaseApkDir" >> $GITHUB_ENV
          # apk 输出文件名(无后缀)
          releaseApkName=`cd $releaseApkDir && ls iLSPosed*.apk | awk -F '.apk' '{print $1}'` && echo "::set-output name=releaseApkName::$releaseApkName" && echo "releaseApkName=$releaseApkName" >> $GITHUB_ENV

      - name: Sign Manager Release
        if: ${{ steps.ciInfo.outputs.isRun == 'Y' && success() }}
        id: sign
        uses: LSPosed/sign-android-release@v1.0.0
        with:
          releaseDirectory: ${{ steps.buildRelease.outputs.releaseApkDir }}
          signingKeyBase64: ${{ secrets.SIGN_KEY_BASE64 }}
          alias: ${{ secrets.SIGN_KEY_ALIAS }}
          keyStorePassword: ${{ secrets.SIGN_KEY_STORE_PASS }}
          keyPassword: ${{ secrets.SIGN_KEY_PASS }}
        env:
          BUILD_TOOLS_VERSION: "30.0.3"

      - name: Upload signed apk
        if: ${{ steps.ciInfo.outputs.isRun == 'Y' && success() }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.buildRelease.outputs.releaseApkName }}
          path: ${{ steps.sign.outputs.signedReleaseFile }}

      - name: Send Message
        if: ${{ steps.ciInfo.outputs.isRun == 'Y' && success() }}
        run: |
          checkSuiteId=`curl -s -H "Accept: $GIT_API_ACCEPT" -H "Authorization: token ${{ secrets.ACTIONS_TOKEN }}" "$GIT_API_RUNS_LIST/$GITHUB_RUN_ID" | jq -r '.check_suite_id'`
          # 文件id 当前的api只能获取 complete 的 artifact, 但是 actions/upload-artifact@v2 无法将运行中的 workflow 的 artifact 标记为 complete, 所以 此时全为空
          artifactId=`curl -s -H "Accept: $GIT_API_ACCEPT" -H "Authorization: token ${{ secrets.ACTIONS_TOKEN }}" "$GIT_API_RUNS_LIST/$GITHUB_RUN_ID/artifacts" | jq -r '.artifacts[0].id'`
          # 拼接下载地址
          archiveDownUrl="https://github.com/$GITHUB_REPOSITORY/suites/$checkSuiteId/artifacts/$artifactId"
          echo checkSuiteId=$checkSuiteId && echo artifactId=$artifactId && echo archiveDownUrl=$archiveDownUrl
          # workflow 详情页面
          wfRunUrl="https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
          # urlencode
          desp=`python3 -c "from urllib.parse import quote;print(quote('[任务详情]($wfRunUrl)\r\n\r\n[$releaseApkName]($archiveDownUrl)\r\n\r\n更新信息:\r\n\r\n'))"`
          curl -s "https://sc.ftqq.com/${{ secrets.SERVERCHAN_KEY }}.send?text=iLSPosedManager.$APPVEYOR_BUILD_NUMBER&desp=$desp$commitMsg"

      - name: Delete Canceled Workflow
        run: |
          # 获取所有被取消的workflow run id
          CANCELLED_IDS=`python3 -c "import json,urllib.request as rq; header={'Accept':'$GIT_API_ACCEPT','Authorization': 'token ${{ secrets.ACTIONS_TOKEN }}'}; req=rq.Request('$GIT_API_RUNS_LIST',headers=header); res=rq.urlopen(req).read(); flows=json.loads(res.decode());ids=[str(flow['id']) for flow in flows['workflow_runs'] if flow['conclusion']=='cancelled']; print(' '.join(ids))"`
          echo CANCELLED_IDS=$CANCELLED_IDS
          for id in `echo $CANCELLED_IDS`; do curl -s -H "Authorization: token ${{ secrets.ACTIONS_TOKEN }}" -H "Accept: $GIT_API_ACCEPT" -X DELETE "$GIT_API_RUNS_LIST/$id"; done

      - name: Cancel or Delete Self if Skiped
        if: ${{ steps.ciInfo.outputs.isRun == 'N' }}
        run: |
          # 删除一般不会成功,应该是因为无法删除正在运行的任务,加上取消 $GITHUB_RUN_ID 和 ${{ github.run_id }} 同一个值
          curl -s -H "Authorization: token ${{ secrets.ACTIONS_TOKEN }}" -H "Accept: $GIT_API_ACCEPT" -X POST "$GIT_API_RUNS_LIST/$GITHUB_RUN_ID/cancel"
          curl -s -H "Authorization: token ${{ secrets.ACTIONS_TOKEN }}" -H "Accept: $GIT_API_ACCEPT" -X DELETE "$GIT_API_RUNS_LIST/$GITHUB_RUN_ID"

