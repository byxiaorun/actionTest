# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

# 每天10:30执行

name: BiliTask

on:
   push:
     branches: main
     paths:
     - 'task/bilitask'
     - '.github/workflows/BiliTask.yml'
   gollum:
   workflow_dispatch:
   schedule:
       - cron: '30 2 * * *'

env:
  SAVE_DIR_NAME: 'BilibiliTask'
  GIT_REPO_URL: 'https://github.com/srcrs/BilibiliTask.git'
  # github api 请求头的 accept
  GIT_API_ACCEPT: 'application/vnd.github.v3+json'
  # github api 请求头的验证 token
  GIT_API_AUTH: 'token ${{ github.token }}'
  # 获取所有 workflows API 地址 ${{ github.repository }} 和 $GITHUB_REPOSITORY 相同
  GIT_API_RUNS_LIST: 'https://api.github.com/repos/${{ github.repository }}/actions/runs'

jobs:
  start:

    runs-on: ubuntu-latest

    steps:
    #- uses: actions/checkout@v2
    - name: Clone BilibiliTask
      run: |
        git clone $GIT_REPO_URL $SAVE_DIR_NAME
        WORK_DIR=$GITHUB_WORKSPACE/$SAVE_DIR_NAME && echo "WORK_DIR=$WORK_DIR" >> $GITHUB_ENV
        echo "GITHUB_WORKSPACE=$WORK_DIR" >> $GITHUB_ENV
        confPath=$WORK_DIR/src/main/resources/config.yml
        # 修改每日投币数
        sed -i 's/coin:.*/coin: 0/g' $confPath
        echo '------当前配置信息如下:' && cat $confPath

    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    - name: Cache Gradle packages
      uses: actions/cache@v2
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: ${{ runner.os }}-gradle

    - name: Build with Gradle
      env:
        BILI_JCT: ${{ secrets.BILITASK_BILI_JCT }}
        DEDEUSERID: ${{ secrets.BILITASK_DEDEUSERID }}
        SESSDATA: ${{ secrets.BILITASK_SESSDATA }}
        SCKEY: ${{ secrets.SERVERCHAN_KEY }}
        DINGTALK: ${{ secrets.DINGTALK }}
        PUSHPLUSTK: ${{ secrets.PUSHPLUSTK }}
        SENDKEY: ${{ secrets.SENDKEY }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      run: |
        # 随机延时 30~60 分钟
        sleepSeconds=$((RANDOM % 1800 + 1800)) && doTime=`date -d "+$sleepSeconds second" "+%Y-%m-%d %H:%M:%S"`
        echo "等待 $sleepSeconds 秒后的 $doTime 开始执行"
        cd $WORK_DIR && sleep "$sleepSeconds"s && sh $WORK_DIR/gradlew runMain

    - name: Delete Cancelled And Old Runs
      run: |
        # 获取所有被取消的workflow run id
        CANCELLED_IDS=`python3 -c "import json,urllib.request as rq; header={'Accept':'$GIT_API_ACCEPT','Authorization': '$GIT_API_AUTH'}; req=rq.Request('$GIT_API_RUNS_LIST',headers=header); res=rq.urlopen(req).read(); flows=json.loads(res.decode());ids=[str(flow['id']) for flow in flows['workflow_runs'] if flow['conclusion']=='cancelled']; print(' '.join(ids))"`
        echo CANCELLED_IDS=$CANCELLED_IDS
        for id in `echo $CANCELLED_IDS`; do curl -s -H "Authorization: $GIT_API_AUTH" -H "Accept: $GIT_API_ACCEPT" -X DELETE "$GIT_API_RUNS_LIST/$id"; done
        # 当前workflow的记录保留5条
        OLD_IDS=`python3 -c "import json,urllib.request as rq; header={'Accept':'$GIT_API_ACCEPT','Authorization': '$GIT_API_AUTH'}; req=rq.Request('$GIT_API_RUNS_LIST',headers=header); res=rq.urlopen(req).read(); flows=json.loads(res.decode());ids=[str(flow['id']) for flow in flows['workflow_runs'] if flow['name']=='$GITHUB_WORKFLOW']; print(' '.join(ids[5:]))"`
        echo OLD_IDS=$OLD_IDS
        for id in `echo $OLD_IDS`; do curl -s -H "Authorization: $GIT_API_AUTH" -H "Accept: $GIT_API_ACCEPT" -X DELETE "$GIT_API_RUNS_LIST/$id"; done

